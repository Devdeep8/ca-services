// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL") // ðŸ‘ˆ this makes migrations work
}


// ==================== MODELS ====================
model Organization {
  id        Int           @id @default(autoincrement())
  name      String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  // Relations
  memberships Membership[]
  clients     Client[]
  businesses  Business[]
  gstins      GSTIN[]
  documents   Document[]
  gstReturns  GSTReturn[]
  itrs        ITR[]
  reminders   Reminder[]
  analyses    AIAnalysis[]
}

model Membership {
  id             Int          @id @default(autoincrement())
  organizationId Int          @map("organization_id")
  userId         Int          @map("user_id")
  role           OrgUserRole  @default(Member)
  createdAt      DateTime     @default(now()) @map("created_at")
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

enum OrgUserRole {
  Admin
  Member
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String
  role         UserRole
  googleId     String?       @map("google_id")
  password     String?       // Added for credentials authentication
  avatar       String?       // Added for user avatar
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  // Relations
  memberships Membership[]
  clients     Client[]       @relation("CreatedClients")
  documents   Document[]     @relation("UploadedDocuments")
  gstReturns  GSTReturn[]    @relation("CreatedGSTReturns")
  itrs        ITR[]          @relation("CreatedITRs")
  reminders   Reminder[]     @relation("CreatedReminders")
}

enum UserRole {
  CA
  Staff
  Client
}

// -------------------- Clients --------------------
model Client {
  id             Int         @id @default(autoincrement())
  organizationId Int         @map("organization_id")
  name           String
  email          String?
  phone          String?
  pan            String?
  address        String?
  createdBy      Int         @map("created_by")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  creator      User         @relation("CreatedClients", fields: [createdBy], references: [id])
  businesses   Business[]
  
  @@index([organizationId])
  @@map("clients")
}

// -------------------- Business --------------------
model Business {
  id             Int          @id @default(autoincrement())
  organizationId Int          @map("organization_id")
  clientId       Int          @map("client_id")
  name           String
  type           String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])
  gstins       GSTIN[]
  documents    Document[]
  gstReturns   GSTReturn[]
  itrs         ITR[]
  reminders    Reminder[]
}

// -------------------- GSTIN --------------------
model GSTIN {
  id                Int       @id @default(autoincrement())
  organizationId    Int       @map("organization_id")
  businessId        Int       @map("business_id")
  gstinNumber       String    @map("gstin_number")
  state             String
  registrationDate  DateTime  @map("registration_date")
  status            GSTINStatus
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  business     Business     @relation(fields: [businessId], references: [id])
  documents    Document[]
  gstReturns   GSTReturn[]
  @@index([organizationId])
  @@index([businessId])
  @@unique([organizationId, gstinNumber]) // Prevent duplicate GSTIN in same org
  @@map("gstins")
}

enum GSTINStatus {
  Active
  Cancelled
  Suspended
}

// -------------------- Document --------------------
model Document {
  id           Int       @id @default(autoincrement())
  organizationId Int     @map("organization_id")
  businessId   Int       @map("business_id")
  gstinId      Int?      @map("gstin_id")
  uploadedBy   Int       @map("uploaded_by")
  fileName     String    @map("file_name")
  filePath     String    @map("file_path")
  fileType     String    @map("file_type")
  category     String
  extractedData Json?    @map("extracted_data")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  business     Business     @relation(fields: [businessId], references: [id])
  gstin        GSTIN?       @relation(fields: [gstinId], references: [id])
  uploader     User         @relation("UploadedDocuments", fields: [uploadedBy], references: [id])
  analyses     AIAnalysis[]
  @@index([organizationId])
  @@index([businessId])
  @@map("documents")
}

// -------------------- GSTReturn --------------------
model GSTReturn {
  id                 Int       @id @default(autoincrement())
  organizationId     Int       @map("organization_id")
  businessId         Int       @map("business_id")
  gstinId            Int       @map("gstin_id")
  returnType         ReturnType @map("return_type")
  periodMonth        Int
  periodYear         Int
  filingDate         DateTime? @map("filing_date")
  dueDate            DateTime? @map("due_date")
  status             FilingStatus
  data               Json?     @map("data")
  reconciliationNotes String?  @map("reconciliation_notes")
  createdBy          Int       @map("created_by")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  business     Business     @relation(fields: [businessId], references: [id])
  gstin        GSTIN        @relation(fields: [gstinId], references: [id])
  creator      User         @relation("CreatedGSTReturns", fields: [createdBy], references: [id])
  analyses     AIAnalysis[]
  @@index([organizationId])
  @@index([businessId])
  @@map("gst_returns")
}

enum ReturnType {
  GSTR1
  GSTR3B
}

enum FilingStatus {
  Draft
  Filed
  Processed
  Rejected
}

// -------------------- ITR --------------------
model ITR {
  id             Int       @id @default(autoincrement())
  organizationId Int       @map("organization_id")
  businessId     Int       @map("business_id")
  assessmentYear Int       @map("assessment_year")
  itrType        String    @map("itr_type")
  filingDate     DateTime? @map("filing_date")
  dueDate        DateTime? @map("due_date")
  status         FilingStatus
  data           Json?     @map("data")
  createdBy      Int       @map("created_by")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  business     Business     @relation(fields: [businessId], references: [id])
  creator      User         @relation("CreatedITRs", fields: [createdBy], references: [id])
  analyses     AIAnalysis[]
  @@index([organizationId])
  @@index([businessId])
  @@map("itrs")
}

// -------------------- Reminder --------------------
model Reminder {
  id           Int           @id @default(autoincrement())
  organizationId Int         @map("organization_id")
  businessId   Int           @map("business_id")
  title        String
  description  String
  dueDate      DateTime      @map("due_date")
  reminderType ReminderType  @map("reminder_type")
  status       ReminderStatus
  createdBy    Int           @map("created_by")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  business     Business     @relation(fields: [businessId], references: [id])
  creator      User         @relation("CreatedReminders", fields: [createdBy], references: [id])
  @@index([organizationId])
  @@index([businessId])
  @@map("reminders")
}

enum ReminderType {
  Document
  Filing
  Payment
}

enum ReminderStatus {
  Pending
  Sent
  Acknowledged
}

// -------------------- AIAnalysis --------------------
model AIAnalysis {
  id              Int          @id @default(autoincrement())
  organizationId  Int          @map("organization_id")
  documentId      Int?         @map("document_id")
  gstReturnId     Int?         @map("gst_return_id")
  itrId           Int?         @map("itr_id")
  analysisType    AnalysisType @map("analysis_type")
  inputData       Json?        @map("input_data")
  outputData      Json?        @map("output_data")
  confidenceScore Float?
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  document     Document?    @relation(fields: [documentId], references: [id])
  gstReturn    GSTReturn?   @relation(fields: [gstReturnId], references: [id])
  itr          ITR?         @relation(fields: [itrId], references: [id])
  @@index([organizationId])
  @@map("ai_analyses")
}

enum AnalysisType {
  DataExtraction
  Reconciliation
  Advisory
}