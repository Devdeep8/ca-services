// schema.prisma

datasource db {
  provider = "postgresql" // or "mysql" / "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==================== MODELS ====================

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  name       String
  role       UserRole
  googleId   String?    @map("google_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  // Relations
  clients    Client[]   @relation("CreatedClients")
  documents  Document[] @relation("UploadedDocuments")
  gstReturns GSTReturn[] @relation("CreatedGSTReturns")
  itrs       ITR[]       @relation("CreatedITRs")
  reminders  Reminder[]  @relation("CreatedReminders")
}

enum UserRole {
  CA
  Staff
  Client
}

model Client {
  id         Int         @id @default(autoincrement())
  name       String
  email      String
  phone      String
  pan        String
  address    String
  createdBy  Int         @map("created_by")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  // Relations
  creator    User        @relation("CreatedClients", fields: [createdBy], references: [id])
  businesses Business[]
}

model Business {
  id         Int         @id @default(autoincrement())
  clientId   Int         @map("client_id")
  name       String
  type       String?     // e.g., Proprietorship, Pvt Ltd, Partnership
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  // Relations
  client     Client      @relation(fields: [clientId], references: [id])
  gstins     GSTIN[]
  documents  Document[]
  gstReturns GSTReturn[]
  itrs       ITR[]
  reminders  Reminder[]
}

model GSTIN {
  id                Int       @id @default(autoincrement())
  businessId        Int       @map("business_id")
  gstinNumber       String    @map("gstin_number")
  state             String
  registrationDate  DateTime  @map("registration_date")
  status            GSTINStatus
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  business   Business   @relation(fields: [businessId], references: [id])
  documents  Document[]
  gstReturns GSTReturn[]
}

enum GSTINStatus {
  Active
  Cancelled
  Suspended
}

model Document {
  id           Int       @id @default(autoincrement())
  businessId   Int       @map("business_id")
  gstinId      Int?      @map("gstin_id")
  uploadedBy   Int       @map("uploaded_by")
  fileName     String    @map("file_name")
  filePath     String    @map("file_path")
  fileType     String    @map("file_type")
  category     String
  extractedData Json?    @map("extracted_data")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  business  Business @relation(fields: [businessId], references: [id])
  gstin     GSTIN?   @relation(fields: [gstinId], references: [id])
  uploader  User     @relation("UploadedDocuments", fields: [uploadedBy], references: [id])
  analyses  AIAnalysis[]
}

model GSTReturn {
  id                 Int       @id @default(autoincrement())
  businessId         Int       @map("business_id")
  gstinId            Int       @map("gstin_id")
  returnType         ReturnType @map("return_type")
  periodMonth        Int
  periodYear         Int
  filingDate         DateTime? @map("filing_date")
  dueDate            DateTime? @map("due_date")
  status             FilingStatus
  data               Json?     @map("data")
  reconciliationNotes String?  @map("reconciliation_notes")
  createdBy          Int       @map("created_by")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relations
  business Business @relation(fields: [businessId], references: [id])
  gstin    GSTIN    @relation(fields: [gstinId], references: [id])
  creator  User     @relation("CreatedGSTReturns", fields: [createdBy], references: [id])
  analyses AIAnalysis[]
}

enum ReturnType {
  GSTR1
  GSTR3B
}

enum FilingStatus {
  Draft
  Filed
  Processed
  Rejected
}

model ITR {
  id             Int       @id @default(autoincrement())
  businessId     Int       @map("business_id")
  assessmentYear Int       @map("assessment_year")
  itrType        String    @map("itr_type")
  filingDate     DateTime? @map("filing_date")
  dueDate        DateTime? @map("due_date")
  status         FilingStatus
  data           Json?     @map("data")
  createdBy      Int       @map("created_by")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  business Business @relation(fields: [businessId], references: [id])
  creator  User     @relation("CreatedITRs", fields: [createdBy], references: [id])
  analyses AIAnalysis[]
}

model Reminder {
  id          Int           @id @default(autoincrement())
  businessId  Int           @map("business_id")
  title       String
  description String
  dueDate     DateTime      @map("due_date")
  reminderType ReminderType @map("reminder_type")
  status      ReminderStatus
  createdBy   Int           @map("created_by")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  business Business @relation(fields: [businessId], references: [id])
  creator  User     @relation("CreatedReminders", fields: [createdBy], references: [id])
}

enum ReminderType {
  Document
  Filing
  Payment
}

enum ReminderStatus {
  Pending
  Sent
  Acknowledged
}

model AIAnalysis {
  id              Int          @id @default(autoincrement())
  documentId      Int?         @map("document_id")
  gstReturnId     Int?         @map("gst_return_id")
  itrId           Int?         @map("itr_id")
  analysisType    AnalysisType @map("analysis_type")
  inputData       Json?        @map("input_data")
  outputData      Json?        @map("output_data")
  confidenceScore Float?
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  // Relations
  document  Document?  @relation(fields: [documentId], references: [id])
  gstReturn GSTReturn? @relation(fields: [gstReturnId], references: [id])
  itr       ITR?       @relation(fields: [itrId], references: [id])
}

enum AnalysisType {
  DataExtraction
  Reconciliation
  Advisory
}
